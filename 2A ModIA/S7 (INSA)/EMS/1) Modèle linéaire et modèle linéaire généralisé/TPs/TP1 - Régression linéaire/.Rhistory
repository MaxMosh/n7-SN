library(knitr)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=FALSE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE,
class.source="badCode")
opts_knit$set(width=75)
library(ellipse)
library(leaps)
library(MASS)
library(corrplot)
library(glmnet)
library(coefplot)
library(ggplot2)
library(gridExtra)
library(ggfortify)
library(plotly)
library(reshape2)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
ozone = read.table("Ozone.txt")
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
boxplot(ozone)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
boxplot(ozone$maxO3)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
boxplot(ozone)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
#boxplot(ozone)
barplot(ozone)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
#boxplot(ozone)
barplot(ozone$maxO3)
#boxplot(ozone)
barplot(ozone)
#boxplot(ozone)
barplot(ozone)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
#boxplot(ozone)
barplot(ozone)
# A COMPLETER - Faire des stat descriptives des données
summary(ozone)
# A COMPLETER - Faire des stat descriptives des données
ozone$vent = as.factor(ozone$vent)
ozone$pluie = as.factor(ozone$pluie)
summary(ozone)
boxplot(ozone)
# A COMPLETER - Faire des stat descriptives des données
ozone$vent = as.factor(ozone$vent)
ozone$pluie = as.factor(ozone$pluie)
summary(ozone)
boxplot(ozone)
pairs(ozone)
barplot(ozone)
corrplot(ozone)
summary(ozone)
boxplot(ozone)
pairs(ozone)
barplot(ozone)
corrplot(ozone)
corrplot(cor(ozone[, 1:11]), method = "ellipse")   #ne fonctionne pas
summary(ozone)
corrplot(cor(ozone[, 1:11]), method = "ellipse")   #ne fonctionne pas
barplot(cor(ozone[, 1:11]), method = "ellipse")    #ne fonctionne pas
summary(ozone)
# A completer
plot(ozone$T12, ozone$maxO3)
ggplot(ozone,aes(x=T12,y=maxO3))+
geom_point()
reg.simple = lm(maxO3~T12, data = ozone)  # A COMPLETER
summary(reg.simple)
reg.simple$coefficients
reg.simple$residuals
ggplot(ozone, aes(T12, maxO3))+
geom_point() +
geom_smooth(method=lm, se=TRUE)+
xlab("T12")+  ylab("maxO3")
ICdte<-predict(reg.simple,new=grillex,
interval="confidence",level=0.95)
plot(maxO3~T12,data=ozone,pch=20)
abline(reg.simple)
T12=seq(min(ozone[,"T12"]),max(ozone[,"T12"]),
length=100)
grillex<-data.frame(T12)
ICdte<-predict(reg.simple,new=grillex,
interval="confidence",level=0.95)
matlines(grillex$T12,cbind(ICdte),lty=c(1,2,2),
col="red")
autoplot(reg.simple,which=c(1,2,4),label.size=2)
ggplot(new_df, aes(T12, maxO3))+
geom_point() +
geom_line(aes(y=lwr), color = "red",
linetype = "dashed")+
geom_line(aes(y=upr), color = "red",
linetype = "dashed")+
geom_smooth(method=lm, se=TRUE)+
xlab("T12")+
ylab("maxO3")
temp_var = predict(reg.simple,
interval="prediction")
new_df = cbind(ozone, temp_var)
ggplot(new_df, aes(T12, maxO3))+
geom_point() +
geom_line(aes(y=lwr), color = "red",
linetype = "dashed")+
geom_line(aes(y=upr), color = "red",
linetype = "dashed")+
geom_smooth(method=lm, se=TRUE)+
xlab("T12")+
ylab("maxO3")
plot(maxO3~T12,data=ozone,pch=20)
ICprev<-predict(reg.simple,new=grillex,
interval="pred",level=0.95)
matlines(grillex$T12,cbind(ICprev),lty=c(1,2,2),
col="blue")
df1 = as.data.frame(
rbind(coefficients(reg.simple),
ellipse(reg.simple,level=0.95)))
colnames(df1) = c("intp", "slope")
ggplot(data=df1[-1,],aes(x=intp, y=slope))+
geom_path()+
annotate("rect",xmin=IC[1,1],xmax=IC[1,2],
ymin=IC[2,1],ymax=IC[2,2],fill="red",alpha=0.1)+
geom_point(data=df1[1,], aes(x=intp, y=slope),
pch=3)
# A COMPLETER
IC = confint(reg.simple)
print(IC)
df1 = as.data.frame(
rbind(coefficients(reg.simple),
ellipse(reg.simple,level=0.95)))
colnames(df1) = c("intp", "slope")
ggplot(data=df1[-1,],aes(x=intp, y=slope))+
geom_path()+
annotate("rect",xmin=IC[1,1],xmax=IC[1,2],
ymin=IC[2,1],ymax=IC[2,2],fill="red",alpha=0.1)+
geom_point(data=df1[1,], aes(x=intp, y=slope),
pch=3)
reg.simple$fitted.values
reg.simple$fitted.values
reg.simple$fitted.values
reg.mul = lm( maxO3 ~ ., data = ozone1 ) # COMPLETE
resume.mul = summary(reg.mul)
summary(reg.mul)
ozone1 = ozone[,1:11]
reg.mul = lm( maxO3 ~ ., data = ozone1 ) # COMPLETE
resume.mul = summary(reg.mul)
summary(reg.mul)
# COMPLETER
autoplot(reg.mul,which=c(1,2,4),label.size=2)
# COMPLETER
autoplot(reg.mul,which=c(1,2),label.size=2)
choix=regsubsets(maxO3 ~ ., data = ozone1, nbest = 1, nvmax = 11, methode = "backward") # COMPLETE
plot(choix, scale = Cp)
choix = regsubsets(maxO3 ~ ., data = ozone1, nbest = 1, nvmax = 11, methode = "backward") # COMPLETE
choix = regsubsets(maxO3 ~ ., data = ozone1, nbest = 1, nvmax = 11, method = "backward") # COMPLETE
plot(choix, scale = Cp)
plot(choix, scale = "Cp")
plot(choix, scale = "adjr2")
plot(choix, scale = "bic")
choix = regsubsets(maxO3 ~ ., data = ozone1, nbest = 1, nvmax = 11, method = "forward") # COMPLETE
plot(choix, scale = "Cp")
stepAIC(reg.mul)
reg.fin=lm(maxO3~T12+Ne9+Vx9+maxO3v,data=ozone1)
summary(reg.fin)
anova(reg.fin,reg.mul)
reg.fin=lm(maxO3~T12+Ne9+Vx9+maxO3v,data=ozone1)
summary(reg.fin)
anova(reg.fin,reg.mul)
reg.fin=lm(maxO3~T12+Ne9+Vx9+maxO3v,data=ozone1)
summary(reg.fin)
anova(reg.fin,reg.mul)
reg.fin=lm(maxO3~T12+Ne9+Vx9+maxO3v,data=ozone1)
summary(reg.fin)
anova(reg.fin,reg.mul)
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
```{r,eval=F}
help("glmnet")
tildeY=scale(ozone1[,1],center=T,scale=T)
tildeX=scale(ozone1[,-1],center=T,scale=T)
lambda_seq<-10^(seq(-4,4,0.01))
fitridge <- glmnet(tildeX, tildeY, alpha = 0, lambda = lambda_seq, family = c("gaussian"), intercept = F) # A completer
summary(fitridge)
df=data.frame(lambda = rep(fitridge$lambda,ncol(tildeX)), theta=as.vector(t(fitridge$beta)),variable=rep(colnames(tildeX),each=length(fitridge$lambda)))
g1 = ggplot(df,aes(x=lambda,y=theta,col=variable))+
geom_line()+
theme(legend.position="bottom")+
scale_x_log10()
ggplotly(g1)
ridge_cv <- cv.glmnet(tildeX, tildeY, alpha = 0, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # COMPLETE
best_lambda <- ridge_cv$lambda.min
df2=data.frame(lambda=ridge_cv$lambda,MSE=ridge_cv$cvm,cvup=ridge_cv$cvup,cvlo=ridge_cv$cvlo)
gmse<-ggplot(df2)+
geom_line(aes(x=lambda,y=MSE))+
geom_vline(xintercept = ridge_cv$lambda.min,col="red",linetype="dotted")+
geom_line(aes(x=lambda,y=cvup),col="blue",linetype="dotted")+
geom_line(aes(x=lambda,y=cvlo),col="blue",linetype="dotted")+
#xlim(c(0,ridge_cv$lambda.min+0.5))+
scale_x_log10()
ggplotly(gmse)
g1=g1 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
scale_x_log10()
g1=g1 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
scale_x_log10()
g1=g1 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
scale_x_log10()
g1
fitlasso <- glmnet(Xtilde, Ytilde, alpha = 1, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # A COMPLETER
summary(fitlasso)
fitlasso <- glmnet(Xtilde, Ytilde, alpha = 1, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # A COMPLETER
summary(fitlasso)
fitlasso <- glmnet(tildeX, tildeY, alpha = 1, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # A COMPLETER
summary(fitlasso)
df=data.frame(lambda = rep(fitlasso$lambda,ncol(tildeX)), theta=as.vector(t(fitlasso$beta)),variable=rep(colnames(tildeX),each=length(fitlasso$lambda)))
g3 = ggplot(df,aes(x=lambda,y=theta,col=variable))+
geom_line()+
theme(legend.position="bottom")+
scale_x_log10()
ggplotly(g3)
lasso_cv <- cv.glmnet(tildeX, tildeY, alpha = 1, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # A COMPLETER
best_lambda <-lasso_cv$lambda.min
lambda1se <- lasso_cv$lambda.1se
g3=g3 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
geom_vline(xintercept = lambda1se,linetype="dotted", color = "blue")+
scale_x_log10()
g3
lasso_cv <- cv.glmnet(tildeX, tildeY, alpha = 1, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # COMPLETE
best_lambda <-lasso_cv$lambda.min
lambda1se <- lasso_cv$lambda.1se
lambda1se
lasso_cv <- cv.glmnet(tildeX, tildeY, alpha = 1, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # COMPLETE
best_lambda <-lasso_cv$lambda.min
lambda1se <- lasso_cv$lambda.1se
extract.coef(lasso_cv, lambda = "lambda_min")   # COMPLETE
extract.coef(lasso_cv, lambda = "lambda.min")   # COMPLETE
# avec lambda.lse
extract.coef(lasso_cv, lambda = "lambda.lse")   # COMPLETE
# avec lambda.lse
extract.coef(lasso_cv, lambda = "lambda.1se")   # COMPLETE
g3=g3 +
geom_vline(xintercept = best_lambda,linetype="dotted", color = "red")+
geom_vline(xintercept = lambda1se,linetype="dotted", color = "blue")+
scale_x_log10()
ggplotly(gmse)
g3
#AJOUT
fitEN <- glmnet(tildeX, tildeY, alpha = 0.5, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F)
df=data.frame(lambda = rep(fitEN$lambda,ncol(tildeX)), theta=as.vector(t(fitEN$beta)),variable=rep(c(colnames(tildeX)),each=length(fitEN$lambda)))
g4 = ggplot(df,aes(x=lambda,y=theta,col=variable))+
geom_line()+
theme(legend.position="bottom")+
scale_x_log10()
EN_cv <- cv.glmnet(tildeX, tildeY, alpha = 1, lambda = lambda_seq, nfolds = 10, type.measure = c("mse"), intercept = F) # A COMPLETER
best_lambda <-EN_cv$lambda.min
g4=g4 + geom_vline(xintercept = best_lambda,linetype="dotted",
color = "red")
ggplotly(g4)
